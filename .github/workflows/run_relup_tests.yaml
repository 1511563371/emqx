name: Release Upgrade Tests

concurrency:
  group: relup-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - '**'
    tags:
      - v*
      - e*
  pull_request:

jobs:
  relup_test_plan:
    runs-on: ubuntu-20.04
    container: "ghcr.io/emqx/emqx-builder/5.0-17:1.13.4-24.2.1-1-ubuntu20.04"
    outputs:
      CUR_CE_VSN: ${{ steps.find-versions.outputs.CUR_CE_VSN }}
      CUR_EE_VSN: ${{ steps.find-versions.outputs.CUR_EE_VSN }}
      OLD_VERSIONS: ${{ steps.find-versions.outputs.OLD_VERSIONS }}
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        path: emqx
        fetch-depth: 0
    - name: Find versions
      id: find-versions
      run: |
        set -x
        cd emqx
        ce_vsn="$(./pkg-vsn.sh opensource)"
        ee_vsn="$(./pkg-vsn.sh enterprise)"
        old_ce_vsns="$(./scripts/relup-base-vsns.sh opensource | xargs)"
        old_ee_vsns="$(./scripts/relup-base-vsns.sh enterprise | xargs)"
        old_vsns=$(echo -n "${old_ce_vsns} ${old_ee_vsns}" | sed 's/ $//g' | jq -R -s -c 'split(" ")')
        echo "::set-output name=CUR_CE_VSN::$ce_vsn"
        echo "::set-output name=CUR_EE_VSN::$ee_vsn"
        echo "::set-output name=OLD_VERSIONS::$old_vsns"
    - name: build emqx
      run: |
        set -x
        cd emqx
        make emqx-tgz
        make emqx-enterprise-tgz
    - uses: actions/upload-artifact@v2
      name: Upload built emqx and test scenario
      with:
        name: emqx_built
        path: |
          emqx/_packages/*/*.tar.gz
          emqx/.ci/fvt_tests

  relup_test_run:
    needs:
      - relup_test_plan
    runs-on: ubuntu-20.04
    container: "ghcr.io/emqx/emqx-builder/5.0-17:1.13.4-24.2.1-1-ubuntu20.04"
    strategy:
      fail-fast: false
      matrix:
        old_vsn: ${{ fromJson(needs.relup_test_plan.outputs.OLD_VERSIONS) }}
    env:
      OLD_VSN: "${{ matrix.old_vsn }}"
      CUR_CE_VSN: "${{ needs.relup_test_plan.outputs.CUR_CE_VSN }}"
      CUR_EE_VSN: "${{ needs.relup_test_plan.outputs.CUR_EE_VSN }}"
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/download-artifact@v2
      name: Download built emqx and test scenario
      with:
        name: emqx_built
        path: emqx_built
    - name: Prepare packages
      run: |
        set -e -x -u
        mkdir -p packages
        cp emqx_built/_packages/*/*.tar.gz packages
        cd packages
        case "$OLD_VSN" in
          e*)
            profile='emqx-enterprise'
            s3dir='emqx-ee'
            ;;
          v*)
            profile='emqx'
            s3dir='emqx-ce'
            ;;
          *)
            echo "unknown old version $OLD_VSN"
            exit 1
            ;;
        esac
        wget --no-verbose https://s3-us-west-2.amazonaws.com/packages.emqx/${s3dir}/$OLD_VSN/${profile}-${OLD_VSN#[e|v]}-otp24.2.1-1-ubuntu20.04-amd64.tar.gz
    - name: Run relup test scenario
      timeout-minutes: 5
      run: |
        set -x
        case "$OLD_VSN" in
          e*)
            cur_vsn=$CUR_EE_VSN
            profile='emqx-enterprise'
            ;;
          v*)
            cur_vsn=$CUR_CE_VSN
            profile='emqx'
            ;;
        esac
        old_pkg="${profile}-${OLD_VSN#[e|v]}-otp24.2.1-1-ubuntu20.04-amd64.tar.gz"
        cur_pkg="${profile}-${cur_vsn}-otp24.2.1-1-ubuntu20.04-amd64.tar.gz"
        lux \
        --progress verbose \
        --case_timeout infinity \
        --var PROFILE="$profile" \
        --var PACKAGE_PATH=$(pwd)/packages \
        --var VSN="$cur_vsn" \
        --var OLD_VSN="$OLD_VSN" \
        --var CUR_PKG="$cur_pkg" \
        --var OLD_PKG="$old_pkg" \
        emqx_built/.ci/fvt_tests/relup.lux
    - uses: actions/upload-artifact@v2
      name: Save debug data
      if: failure()
      with:
        name: debug_data
        path: |
          packages/emqx1/*
          packages/emqx2/*
          lux_logs
