emqx_schema {

    zones {
        desc {
            en: """A zone is a set of configs grouped by the zone <code>name</code>.
For flexible configuration mapping, the <code>name</code> can be set to a listener's <code>zone</code> config.
NOTE: A built-in zone named <code>default</code> is auto created and can not be deleted.
"""
            zh: """ """
        }
    }

    mqtt {
        desc {
            en: """Global MQTT configuration.
The configs here work as default values which can be overridden in <code>zone</code> configs
"""
            zh: """ """
        }
    }

    mqtt_idle_timeout {
        desc {
            en: """Close TCP connections from the clients that have not sent MQTT CONNECT message within this interval."""
            zh: """ """
        }
    }

    mqtt_max_packet_size {
        desc {
            en: """Maximum MQTT packet size allowed."""
            zh: """ """
        }
    }

    mqtt_max_clientid_len {
        desc {
            en: """"Maximum allowed length of MQTT clientId."""
            zh: """ """
        }
    }

    mqtt_max_topic_levels {
        desc {
            en: """Maximum topic levels allowed."""
            zh: """ """
        }
    }

    mqtt_max_qos_allowed {
        desc {
            en: """Maximum QoS allowed."""
            zh: """ """
        }
    }

    mqtt_max_topic_alias {
        desc {
            en: """Maximum Topic Alias, 0 means no topic alias supported."""
            zh: """ """
        }
    }

    mqtt_retain_available {
        desc {
            en: """Support MQTT retained messages."""
            zh: """ """
        }
    }

    mqtt_wildcard_subscription {
        desc {
            en: """Support MQTT Wildcard Subscriptions."""
            zh: """ """
        }
    }

    mqtt_shared_subscription {
        desc {
            en: """Support MQTT Shared Subscriptions."""
            zh: """ """
        }
    }

    mqtt_ignore_loop_deliver {
        desc {
            en: """Ignore loop delivery of messages for MQTT v3.1.1."""
            zh: """ """
        }
    }

    mqtt_strict_mode {
        desc {
            en: """Parse MQTT messages in strict mode.
When set to true, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected"""
            zh: """ """
        }
    }

    mqtt_response_information {
        desc {
            en: """Specify the response information returned to the client.
This feature is disabled if is set to \"\"."""
            zh: """ """
        }
    }

    mqtt_server_keepalive {
        desc {
            en: """'Server Keep Alive' of MQTT 5.0.
If the server returns a 'Server Keep Alive' in the CONNACK packet, the client MUST use that value instead of the value it sent as the 'Keep Alive'."""
            zh: """ """
        }
    }

    mqtt_keepalive_backoff {
        desc {
            en: """The backoff for MQTT keepalive timeout. The broker will close the connection after idling for 'Keepalive * backoff * 2'."""
            zh: """ """
        }
    }

    mqtt_max_subscriptions {
        desc {
            en: """Maximum number of subscriptions allowed."""
            zh: """ """
        }
    }

    mqtt_upgrade_qos {
        desc {
            en: """Force upgrade of QoS level according to subscription."""
            zh: """ """
        }
    }

    mqtt_max_inflight {
        desc {
            en: """Maximum size of the Inflight Window storing QoS1/2 messages delivered but un-acked."""
            zh: """ """
        }
    }

    mqtt_retry_interval {
        desc {
            en: """Retry interval for QoS1/2 message delivering."""
            zh: """ """
        }
    }

    mqtt_max_awaiting_rel {
        desc {
            en: """Maximum QoS2 packets (Client -> Broker) awaiting PUBREL."""
            zh: """ """
        }
    }

    mqtt_await_rel_timeout {
        desc {
            en: """The QoS2 messages (Client -> Broker) will be dropped if awaiting PUBREL timeout."""
            zh: """ """
        }
    }

    mqtt_session_expiry_interval {
        desc {
            en: """Default session expiry interval for MQTT V3.1.1 connections."""
            zh: """ """
        }
    }

    mqtt_max_mqueue_len {
        desc {
            en: """Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full."""
            zh: """ """
        }
    }

    mqtt_mqueue_priorities {
        desc {
            en: """Topic priorities.
There's no priority table by default, hence all messages are treated equal. Priority number [1-255]

**NOTE**: Comma and equal signs are not allowed for priority topic names.
**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.

**Examples**:
To configure <code>\"topic/1\" > \"topic/2\"</code>:
<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>
"""
            zh: """ """
        }
    }

    mqtt_mqueue_default_priority {
        desc {
            en: """Default to the highest priority for topics not matching priority table."""
            zh: """ """
        }
    }

    mqtt_mqueue_store_qos0 {
        desc {
            en: """Support enqueue QoS0 messages."""
            zh: """ """
        }
    }

    mqtt_use_username_as_clientid {
        desc {
            en: """Replace client ID with the username."""
            zh: """ """
        }
    }

    mqtt_peer_cert_as_username {
        desc {
            en: """Use the CN, DN or CRT field from the client certificate as a username.
Only works for the TLS connection."""
            zh: """ """
        }
    }

    mqtt_peer_cert_as_clientid {
        desc {
            en: """Use the CN, DN or CRT field from the client certificate as a clientid.
Only works for the TLS connection."""
            zh: """ """
        }
    }

    broker {
        desc {
            en: """"Message broker options."""
            zh: """ """
        }
    }

    broker_enable_session_registry {
        desc {
            en: """Enable session registry"""
            zh: """ """
        }
    }

    broker_session_locking_strategy {
        desc {
            en: """Session locking strategy in a cluster.
  - `local`: only lock the session on the current node
  - `one`: select only one remote node to lock the session
  - `quorum`: select some nodes to lock the session
  - `all`: lock the session on all the nodes in the cluster
"""

            zh: """ """
        }
    }

    broker_shared_subscription_strategy {
        desc {
            en: """Dispatch strategy for shared subscription.
  - `random`: dispatch the message to a random selected subscriber
  - `round_robin`: select the subscribers in a round-robin manner
  - `sticky`: always use the last selected subscriber to dispatch, until the subscriber disconnects.
  - `hash`: select the subscribers by the hash of `clientIds`
"""

            zh: """ """
        }
    }

    broker_shared_dispatch_ack_enabled {
        desc {
            en: """Enable/disable shared dispatch acknowledgement for QoS1 and QoS2 messages.
This should allow messages to be dispatched to a different subscriber in the group in case the picked (based on `shared_subscription_strategy`) subscriber is offline.
"""

            zh: """ """
        }
    }

    broker_route_batch_clean {
        desc {
            en: """Enable batch clean for deleted routes."""
            zh: """ """
        }
    }

    broker_perf_route_lock_type {
        desc {
            en: """Performance tuning for subscribing/unsubscribing a wildcard topic.
Change this parameter only when there are many wildcard topics.

NOTE: when changing from/to `global` lock, it requires all nodes in the cluster to be stopped before the change.
  - `key`: mnesia transactional updates with per-key locks. Recommended for a single-node setup.
  - `tab`: mnesia transactional updates with table lock. Recommended for a cluster setup.
  - `global`: updates are protected with a global lock. Recommended for large clusters.
"""
            zh: """ """
        }
    }

    broker_perf_trie_compaction {
        desc {
            en: """Enable trie path compaction.
Enabling it significantly improves wildcard topic subscribe rate, if wildcard topics have unique prefixes like: 'sensor/{{id}}/+/', where ID is unique per subscriber.
Topic match performance (when publishing) may degrade if messages are mostly published to topics with large number of levels.

NOTE: This is a cluster-wide configuration. It requires all nodes to be stopped before changing it.
"""
            zh: """ """
        }
    }

    sys_topics {
        desc {
            en: """ """
            zh: """ """
        }
    }

    sys_msg_interval {
        desc {
            en: """Time interval of publishing `$SYS` messages."""
            zh: """ """
        }
    }

    sys_heartbeat_interval {
        desc {
            en: """Time interval for publishing following heartbeat messages:
- `$SYS/brokers/<node>/uptime`
- `$SYS/brokers/<node>/datetime`
"""
            zh: """ """
        }
    }

    sys_event_messages {
        desc {
            en: """ """
            zh: """ """
        }
    }

    sys_event_client_connected {
        desc {
            en: """Enable to publish client connected event messages"""
            zh: """ """
        }
    }

    sys_event_client_disconnected {
        desc {
            en: """Enable to publish client disconnected event messages."""
            zh: """ """
        }
    }

    sys_event_client_subscribed {
        desc {
            en: """Enable to publish event message that client subscribed a topic successfully."""
            zh: """ """
        }
    }

    sys_event_client_unsubscribed {
        desc {
            en: """Enable to publish event message that client unsubscribed a topic successfully."""
            zh: """ """
        }
    }
}
