emqx_gateway_api_clients {

    list_clients {
        desc {
            en: """Get the gateway client list"""
            zh: """ """
        }
    }

    get_client {
        desc {
            en: """Get the gateway client information"""
            zh: """ """
        }
    }

    kick_client {
        desc {
            en: """Kick out the gateway client"""
            zh: """ """
        }
    }

    list_subscriptions {
        desc {
            en: """Get the gateway client subscriptions"""
            zh: """ """
        }
    }

    add_subscription {
        desc {
            en: """Create a subscription membership"""
            zh: """ """
        }
    }

    delete_subscription {
        desc {
            en: """Delete a subscriptions membership"""
            zh: """ """
        }
    }

    param_node {
        desc {
            en: """Match the client's node name"""
            zh: """ """
        }
    }

    param_clientid {
        desc {
            en: """Match the client's ID"""
            zh: """ """
        }
    }

    param_username {
        desc {
            en: """Match the client's Username"""
            zh: """ """
        }
    }

    param_ip_address {
        desc {
            en: """Match the client's ip address"""
            zh: """ """
        }
    }

    param_conn_state {
        desc {
            en: """Match the client's connection state"""
            zh: """ """
        }
    }

    param_proto_ver {
        desc {
            en: """Match the client's protocol version"""
            zh: """ """
        }
    }

    param_clean_start {
        desc {
            en: """Match the client's clean start flag"""
            zh: """ """
        }
    }

    param_like_clientid {
        desc {
            en: """Use sub-string to match client's ID"""
            zh: """ """
        }
    }

    param_like_username {
        desc {
            en: """Use sub-string to match client's username"""
            zh: """ """
        }
    }

    param_gte_created_at {
        desc {
            en: """Match the session created datetime greater than a certain value"""
            zh: """ """
        }
    }

    param_lte_created_at {
        desc {
            en: """Match the session created datetime less than a certain value"""
            zh: """ """
        }
    }

    param_gte_connected_at{
        desc {
            en: """Match the client socket connected datetime greater than a certain value"""
            zh: """ """
        }
    }

    param_lte_connected_at {
        desc {
            en: """Match the client socket connected datatime less than a certain value"""
            zh: """ """
        }
    }

    param_endpoint_name {
        desc {
            en: """Match the lwm2m client's endpoint name"""
            zh: """ """
        }
    }

    param_like_endpoint_name {
        desc {
            en: """Use sub-string to match lwm2m client's endpoint name"""
            zh: """ """
        }
    }

    param_gte_lifetime {
        desc {
            en: """Match the lwm2m client registered lifetime greater than a certain value"""
            zh: """ """
        }
    }

    param_lte_lifetime {
        desc {
            en: """Match the lwm2m client registered lifetime less than a certain value"""
            zh: """ """
        }
    }

    clientid {
        desc {
            en: """Client ID"""
            zh: """ """
        }
    }

    topic {
        desc {
            en: """Topic Filter/Name"""
            zh: """ """
        }
    }

    endpoint_name {
        desc {
            en: """The LwM2M client endpoint name"""
            zh: """ """
        }
    }

    lifetime {
        desc {
            en: """Life time"""
            zh: """ """
        }
    }

    qos {
        desc {
            en: """QoS level, enum: 0, 1, 2"""
            zh: """ """
        }
    }

    nl {
        desc {
            en: """No Local option, enum: 0, 1"""
            zh: """ """
        }
    }

    rap {
        desc {
            en: """Retain as Published option, enum: 0, 1"""
            zh: """ """
        }
    }

    rh {
        desc {
            en: """Retain Handling option, enum: 0, 1, 2"""
            zh: """ """
        }
    }

    sub_props {
        desc {
            en: """Subscription properties"""
            zh: """ """
        }
    }

    subid {
        desc {
            en: """Only stomp protocol, a unique identity for the subscription. range: 1-65535."""
            zh: """ """
        }
    }

    node {
        desc {
            en: """Name of the node to which the client is connected"""
            zh: """ """
        }
    }

    username {
        desc {
            en: """Username of client when connecting"""
            zh: """ """
        }
    }

    proto_name {
        desc {
            en: """Client protocol name"""
            zh: """ """
        }
    }

    proto_ver {
        desc {
            en: """Protocol version used by the client"""
            zh: """ """
        }
    }

    ip_address {
        desc {
            en: """Client's IP address"""
            zh: """ """
        }
    }

    port {
        desc {
            en: """Client's port"""
            zh: """ """
        }
    }

    is_bridge {
        desc {
            en: """Indicates whether the client is connected via bridge"""
            zh: """ """
        }
    }

    connected_at {
        desc {
            en: """Client connection time"""
            zh: """ """
        }
    }

    disconnected_at {
        desc {
            en: """Client offline time, This field is only valid and returned when connected is false"""
            zh: """ """
        }
    }

    connected {
        desc {
            en: """Whether the client is connected"""
            zh: """ """
        }
    }

    keepalive {
        desc {
            en: """keepalive time, with the unit of second"""
            zh: """ """
        }
    }

    clean_start {
        desc {
            en: """Indicate whether the client is using a brand new session"""
            zh: """ """
        }
    }

    expiry_interval {
        desc {
            en: """Session expiration interval, with the unit of second"""
            zh: """ """
        }
    }

    created_at {
        desc {
            en: """Session creation time"""
            zh: """ """
        }
    }

    subscriptions_cnt {
        desc {
            en: """Number of subscriptions established by this client"""
            zh: """ """
        }
    }

    subscriptions_max {
        desc {
            en: """Maximum number of subscriptions allowed by this client"""
            zh: """ """
        }
    }

    inflight_cnt {
        desc {
            en: """Current length of inflight"""
            zh: """ """
        }
    }

    inflight_max {
        desc {
            en: """Maximum length of inflight"""
            zh: """ """
        }
    }

    mqueue_len {
        desc {
            en: """Current length of message queue"""
            zh: """ """
        }
    }

    mqueue_max {
        desc {
            en: """Maximum length of message queue"""
            zh: """ """
        }
    }

    mqueue_dropped {
        desc {
            en: """Number of messages dropped by the message queue due to exceeding the length"""
            zh: """ """
        }
    }

    awaiting_rel_cnt {
        desc {
            en: """Number of awaiting acknowledge packet"""
            zh: """ """
        }
    }

    awaiting_rel_max {
        desc {
            en: """Maximum allowed number of awaiting PUBREC packet"""
            zh: """ """
        }
    }

    recv_oct {
        desc {
            en: """Number of bytes received"""
            zh: """ """
        }
    }

    recv_cnt {
        desc {
            en: """Number of socket packets received"""
            zh: """ """
        }
    }

    recv_pkt {
        desc {
            en: """Number of protocol packets received"""
            zh: """ """
        }
    }

    recv_msg {
        desc {
            en: """Number of message packets received"""
            zh: """ """
        }
    }

    send_oct {
        desc {
            en: """Number of bytes sent"""
            zh: """ """
        }
    }

    send_cnt {
        desc {
            en: """Number of socket packets sent"""
            zh: """ """
        }
    }

    send_pkt {
        desc {
            en: """Number of protocol packets sent"""
            zh: """ """
        }
    }

    send_msg {
        desc {
            en: """Number of message packets sent"""
            zh: """ """
        }
    }

    mailbox_len {
        desc {
            en: """Process mailbox size"""
            zh: """ """
        }
    }

    heap_size {
        desc {
            en: """Process heap size with the unit of byte"""
            zh: """ """
        }
    }

    reductions {
        desc {
            en: """Erlang reduction"""
            zh: """ """
        }
    }

    endpoint_name {
        desc {
            en: """ """
            zh: """ """
        }
    }

    endpoint_name {
        desc {
            en: """ """
            zh: """ """
        }
    }

    endpoint_name {
        desc {
            en: """ """
            zh: """ """
        }
    }

    endpoint_name {
        desc {
            en: """ """
            zh: """ """
        }
    }

    endpoint_name {
        desc {
            en: """ """
            zh: """ """
        }
    }

}
