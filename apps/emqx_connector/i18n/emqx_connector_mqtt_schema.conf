emqx_connector_mqtt_schema {
    mode {
        desc {
          en: """
The mode of the MQTT Bridge. Can be one of 'cluster_singleton' or 'cluster_shareload'<br/>

- cluster_singleton: create a unique MQTT connection within the emqx cluster.<br/>
In 'cluster_singleton' node, all messages toward the remote broker go through the same
MQTT connection.<br/>
- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/>
In 'cluster_shareload' mode, the incoming load from the remote broker is shared by
using shared subscription.<br/>
Note that the 'clientid' is suffixed by the node name, this is to avoid
clientid conflicts between different nodes. And we can only use shared subscription
topic filters for 'remote_topic' of ingress connections.
"""
          zh: """
MQTT 桥的模式。 可用的类型有“cluster_singleton”，“cluster_shareload”。<br/>

- cluster_singleton：在 emqx 集群内创建唯一的 MQTT 连接。<br/>
在“cluster_singleton”节点中，所有发往远程代理的消息都通过相同的MQTT 连接。<br/>

- cluster_shareload：在 emqx 集群的每个节点上创建一个 MQTT 连接。<br/>
在“cluster_shareload”模式下，来自远程代理的传入负载通过共享订阅的方式接收。<br/>
请注意，“clientid”以节点名称为后缀，这是为了避免不同节点之间的clientid冲突。
而且对于入口连接的“remote_topic”，我们只能使用共享订阅主题过滤器。
"""
        }
        label: {
              en: "MQTT Bridge Mode"
              zh: "MQTT 桥接模式"
            }
    }

    server {
        desc {
          en: "The host and port of the remote MQTT broker"
          zh: "远程 MQTT Broker的主机和端口。"
        }
        label: {
              en: "Broker IP And Port"
              zh: "Broker主机和端口"
            }
    }

    proto_ver {
        desc {
          en: "The MQTT protocol version"
          zh: "MQTT 协议版本"
        }
        label: {
              en: "Protocol Version"
              zh: "协议版本"
            }
    }

    username {
        desc {
          en: "The username of the MQTT protocol"
          zh: "MQTT 协议的用户名"
        }
        label: {
              en: "Username"
              zh: "用户名"
            }
    }

    password {
        desc {
          en: "The password of the MQTT protocol"
          zh: "MQTT 协议的密码"
        }
        label: {
              en: "Password"
              zh: "密码"
            }
    }

    clean_start {
        desc {
          en: "The clean-start or the clean-session of the MQTT protocol"
          zh: "MQTT 清除会话"
        }
        label: {
              en: "Clean Session"
              zh: "清除会话"
            }
    }

    max_inflight {
        desc {
          en: "Max inflight (sent, but un-acked) messages of the MQTT protocol"
          zh: "MQTT 协议的最大飞行（已发送但未确认）消息"
        }
        label: {
              en: "Max Inflight Message"
              zh: "最大飞行消息"
            }
    }

    ingress_remote_topic {
        desc {
          en: "Receive messages from which topic of the remote broker"
          zh: "从远程broker的哪个topic接收消息"
        }
        label: {
              en: "Remote Topic"
              zh: "远程主题"
            }
    }

    ingress_remote_qos {
        desc {
          en: "The QoS level to be used when subscribing to the remote broker"
          zh: "订阅远程borker时要使用的 QoS 级别"
        }
        label: {
              en: "Remote QoS"
              zh: "远程 QoS"
            }
    }

    ingress_local_topic {
        desc {
          en: """
Send messages to which topic of the local broker.<br/>
Template with variables is allowed.
"""
          zh: """
向本地broker的哪个topic发送消息。<br/>
允许使用带有变量的模板。
"""
        }
        label: {
              en: "Local Topic"
              zh: "本地主题"
            }
    }

    ingress_local_qos {
        desc {
          en: """
The QoS of the MQTT message to be sent.<br/>
Template with variables is allowed.
"""
          zh: """
待发送 MQTT 消息的 QoS。<br/>
允许使用带有变量的模板。
"""
        }
        label: {
              en: "Local QoS"
              zh: "本地 QoS"
            }
    }

    ingress_hookpoint {
        desc {
          en: "The hook point will be triggered when there's any message received from the remote broker."
          zh: "当从远程borker收到任何消息时，将触发钩子。"
        }
        label: {
              en: "Hookpoint"
              zh: "挂载点"
            }
    }

    egress_local_topic {
        desc {
          en: "The local topic to be forwarded to the remote broker"
          zh: "要转发到远程broker的本地主题"
        }
        label: {
              en: "Local Topic"
              zh: "本地主题"
            }
    }

    egress_remote_topic {
        desc {
          en: """
Forward to which topic of the remote broker.<br/>
Template with variables is allowed.
"""
          zh: """
转发到远程broker的哪个topic。<br/>
允许使用带有变量的模板。
"""
        }
        label: {
              en: "Remote Topic"
              zh: "远程主题"
            }
    }

    egress_remote_qos {
        desc {
          en: """
The QoS of the MQTT message to be sent.<br/>
Template with variables is allowed.
"""
          zh: """
待发送 MQTT 消息的 QoS。<br/>
允许使用带有变量的模板。
"""
        }
        label: {
              en: "Remote QoS"
              zh: "远程 QoS"
            }
    }

    dir {
        desc {
          en: """
The dir where the replayq file saved.<br/>
Set to 'false' disables the replayq feature.
"""
          zh: """
replayq 文件保存的目录。<br/>
设置为 'false' 会禁用 replayq 功能。
"""
        }
        label: {
              en: "Replyq file Save Dir"
              zh: "Replyq 文件保存目录"
            }
    }

    seg_bytes {
        desc {
          en: """
The size in bytes of a single segment.<br/>
A segment is mapping to a file in the replayq dir. If the current segment is full, a new segment
(file) will be opened to write.
"""
          zh: """
单个段的大小（以字节为单位）。<br/>
一个段映射到 replayq 目录中的一个文件。 如果当前段已满，则新段（文件）将被打开写入。
"""
        }
        label: {
              en: "Segment Size"
              zh: "Segment 大小"
            }
    }

    offload {
        desc {
          en: """
In offload mode, the disk queue is only used to offload queue tail segments.<br/>
The messages are cached in the memory first, then it writes to the replayq files after the size of
the memory cache reaches 'seg_bytes'.
"""
          zh: """
在Offload模式下，磁盘队列仅用于卸载队列尾段。<br/>
消息首先缓存在内存中，然后写入replayq文件。内存缓大小为“seg_bytes” 指定的值。
"""
        }
        label: {
              en: "Offload Mode"
              zh: "Offload 模式"
            }
    }

    retain {
        desc {
          en: """
The 'retain' flag of the MQTT message to be sent.<br/>
Template with variables is allowed.
"""
          zh: """
要发送的 MQTT 消息的“保留”标志。<br/>
允许使用带有变量的模板。
"""
        }
        label: {
              en: "Retain Flag"
              zh: "保留消息标志"
            }
    }

    payload {
        desc {
          en: """
The payload of the MQTT message to be sent.<br/>
Template with variables is allowed.
"""
          zh: """
要发送的 MQTT 消息的负载。<br/>
允许使用带有变量的模板。
"""
        }
        label: {
              en: "Payload"
              zh: "消息负载"
            }
    }

}
