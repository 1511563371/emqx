##--------------------------------------------------------------------
## EMQ X Bridge
##--------------------------------------------------------------------

## MQTT bridges to/from another MQTT broker
#bridges.mqtt.my_mqtt_bridge_from_aws {
#    server = "127.0.0.1:1883"
#    proto_ver = "v4"
#    clientid = "my_mqtt_bridge_from_aws"
#    username = "username1"
#    password = ""
#    clean_start = true
#    keepalive = 300
#    retry_interval = "30s"
#    max_inflight = 32
#    reconnect_interval = "30s"
#    bridge_mode = true
#    replayq {
#        dir = "{{ platform_data_dir }}/replayq/bridge_mqtt/"
#        seg_bytes = "100MB"
#        offload = false
#        max_total_bytes = "1GB"
#    }
#    ssl {
#        enable = false
#        keyfile = "{{ platform_etc_dir }}/certs/client-key.pem"
#        certfile = "{{ platform_etc_dir }}/certs/client-cert.pem"
#        cacertfile = "{{ platform_etc_dir }}/certs/cacert.pem"
#    }
#
#    ## topic mappings for this bridge
#    direction = in
#    from_remote_topic = "aws/#"
#    subscribe_qos = 1
#    to_local_topic = "from_aws/${topic}"
#    payload = "${payload}"
#    qos = "${qos}"
#    retain = "${retain}"
#}
#
#bridges.mqtt.my_mqtt_bridge_to_aws {
#    server = "127.0.0.1:1883"
#    proto_ver = "v4"
#    clientid = "my_mqtt_bridge_to_aws"
#    username = "username1"
#    password = ""
#    clean_start = true
#    keepalive = 300
#    retry_interval = "30s"
#    max_inflight = 32
#    reconnect_interval = "30s"
#    bridge_mode = true
#    replayq {
#        dir = "{{ platform_data_dir }}/replayq/bridge_mqtt/"
#        seg_bytes = "100MB"
#        offload = false
#        max_total_bytes = "1GB"
#    }
#    ssl {
#        enable = false
#        keyfile = "{{ platform_etc_dir }}/certs/client-key.pem"
#        certfile = "{{ platform_etc_dir }}/certs/client-cert.pem"
#        cacertfile = "{{ platform_etc_dir }}/certs/cacert.pem"
#    }
#
#    ## topic mappings for this bridge
#    direction = out
#    from_local_topic = "emqx/#"
#    to_remote_topic = "from_emqx/${topic}"
#    payload = "${payload}"
#    qos = 1
#    retain = false
#}

## HTTP bridges to an HTTP server
bridges.http.my_http_bridge {
    ## NOTE: we cannot use placehodler variables in the `scheme://host:port` part of the url string
    url = "http://localhost:9901/messages/${topic}"
    request_timeout = "30s"
    connect_timeout = "30s"
    max_retries = 3
    retry_interval = "10s"
    pool_type = "random"
    pool_size = 4
    enable_pipelining = true
    ssl {
        enable = false
        keyfile = "{{ platform_etc_dir }}/certs/client-key.pem"
        certfile = "{{ platform_etc_dir }}/certs/client-cert.pem"
        cacertfile = "{{ platform_etc_dir }}/certs/cacert.pem"
    }

    from_local_topic = "emqx_http/#"
    ## the following config entries can use placehodler variables:
    ##   url, method, body, headers
    method = post
    body = "${payload}"
    headers {
        "content-type": "application/json"
    }
}
